//FusionCharts Gantt custom widget for SAC Version 1.0.0. Copyright 2021 Arijit Das.
(function() {
    let template = document.createElement("template");
    template.innerHTML = `<div id=chart-container-fgantt></div><style>#chart-container-fgantt{height:500px;}</style>`;
    class FGANTT extends HTMLElement {
        constructor() {
            super();
            let shadowRoot = this.attachShadow({
                mode: "open"
            });
            shadowRoot.appendChild(template.content.cloneNode(true));
            this._props = undefined;
            this._init = true;
            this._firstUpdate = true;
            this._firstResize = true;
            this._selectionEvent = false;
        }
        onCustomWidgetBeforeUpdate(changedProperties) {}
        onCustomWidgetAfterUpdate(changedProperties) {
            var shadow = this.shadowRoot;            
            let LoadLibsAfterUpdate = async function(host, data, props) {
                try {
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js", shadow);
					await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.gantt.js", shadow);
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js", shadow);
					await host.loadScript("https://p925088.github.io/SAC-Custom-Widget/fusiongantt.json.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            if (!(this._init || this._selectionEvent)) {
                if (this._firstUpdate) {
                    LoadLibsAfterUpdate(this, this.$data, this._props);
                    this._firstUpdate = false;
                } else {
                    this.drawChart(this.$data, this._props);
                }
            }
        }
        onCustomWidgetResize(width, height) {
            var shadow = this.shadowRoot;
            this.$width = width + 'px';
            this.$height = height + 'px';
            let LoadLibsAfterResize = async function(host, data, props) {
                try {
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js", shadow);
					await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.gantt.js", shadow);
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js", shadow);
					await host.loadScript("https://p925088.github.io/SAC-Custom-Widget/fusiongantt.json.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            if (this._firstResize) {
                LoadLibsAfterResize(this, this.$data, this._props);
                this._firstResize = false;
            } else {
                this.drawChart(this.$data, this._props);
            }
        }
        connectedCallback() {
            var shadow = this.shadowRoot;
            var custelem = shadow.host;
            this.$width = custelem.parentNode.parentNode.parentNode.style.width;
            this.$height = custelem.parentNode.parentNode.parentNode.style.height;
            let LoadLibs = async function(host, data, props) {
                try {
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js", shadow);
					await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.gantt.js", shadow);
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js", shadow);
					await host.loadScript("https://p925088.github.io/SAC-Custom-Widget/fusiongantt.json.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            LoadLibs(this, this.$data, this._props);
            this._init = false;
        }
        disconnectedCallback() {}
        
        drawChart(value, config) {
            const dataSource = myJSONData();
			
			var root = this.shadowRoot;
			var container = root.querySelector('#chart-container-fgantt');

			FusionCharts.ready(function() {				
			  var myChart = new FusionCharts({
				type: "gantt",
				renderAt: container,
				width: "100%",
				height: "100%",
				dataFormat: "json",
				dataSource
			  }).render();
			});
        }
        loadScript(src, shadowRoot) {
            return new Promise(function(resolve, reject) {
                let script = document.createElement('script');
                script.src = src;
                script.onload = () => {
                    console.log("Load: " + src);
                    resolve(script);
                };
                script.onerror = () => reject(new Error(`Script load error for ${src}`));
                shadowRoot.appendChild(script);
            });
        }        
    }
    customElements.define("com-gmail-cse-ari007-fusiongantt", FGANTT);
})();